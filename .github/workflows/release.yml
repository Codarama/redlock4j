name: Release to Maven Central

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    environment: maven-central
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      
    - name: Set up Java with Maven cache
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: 'maven'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Releasing version: $VERSION"
        
    - name: Update version in Maven configuration
      run: |
        mvn --no-transfer-progress \
          --batch-mode \
          versions:set -DnewVersion=${{ steps.version.outputs.version }}
        echo "Updated version to: ${{ steps.version.outputs.version }}"
        
    - name: Run tests before release
      run: |
        echo "Running tests before release..."
        mvn --no-transfer-progress --batch-mode clean test -Dtest=RedlockConfigurationTest
        echo "âœ… Unit tests passed"
        
        # Run integration tests
        mvn --no-transfer-progress --batch-mode test -Dtest=RedlockIntegrationTest
        echo "âœ… Integration tests passed"
        
    - name: Install GPG key
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG
        
    - name: Publish to Maven Central
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
      run: |
        mvn --no-transfer-progress \
          --batch-mode \
          -Dgpg.passphrase='${{ secrets.GPG_PASSPHRASE }}' \
          deploy -P sonatype-oss-release
          
    - name: Create release summary
      run: |
        echo "## ðŸŽ‰ Release Published Successfully" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** Maven Central" >> $GITHUB_STEP_SUMMARY
        echo "- **Group ID:** org.codarama" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact ID:** redlock4j" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Maven Dependency" >> $GITHUB_STEP_SUMMARY
        echo '```xml' >> $GITHUB_STEP_SUMMARY
        echo '<dependency>' >> $GITHUB_STEP_SUMMARY
        echo '    <groupId>org.codarama</groupId>' >> $GITHUB_STEP_SUMMARY
        echo '    <artifactId>redlock4j</artifactId>' >> $GITHUB_STEP_SUMMARY
        echo '    <version>${{ steps.version.outputs.version }}</version>' >> $GITHUB_STEP_SUMMARY
        echo '</dependency>' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Gradle Dependency" >> $GITHUB_STEP_SUMMARY
        echo '```gradle' >> $GITHUB_STEP_SUMMARY
        echo "implementation 'org.codarama:redlock4j:${{ steps.version.outputs.version }}'" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** It may take up to 2 hours for the artifact to be available in Maven Central." >> $GITHUB_STEP_SUMMARY
        
    - name: Comment on release
      if: github.event_name == 'release'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.version.outputs.version }}';
          const comment = `
          ## ðŸŽ‰ Successfully Published to Maven Central!
          
          **Version:** \`${version}\`
          
          ### Usage
          
          **Maven:**
          \`\`\`xml
          <dependency>
              <groupId>org.codarama</groupId>
              <artifactId>redlock4j</artifactId>
              <version>${version}</version>
          </dependency>
          \`\`\`
          
          **Gradle:**
          \`\`\`gradle
          implementation 'org.codarama:redlock4j:${version}'
          \`\`\`
          
          **Note:** It may take up to 2 hours for the artifact to be available in Maven Central.
          
          ðŸ”— **Maven Central:** https://central.sonatype.com/artifact/org.codarama/redlock4j/${version}
          `;
          
          await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: context.payload.release.tag_name,
            name: context.payload.release.name,
            body: context.payload.release.body + '\n\n' + comment,
            draft: false,
            prerelease: context.payload.release.prerelease
          }).catch(() => {
            // If release already exists, just add a comment
            return github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.release.number,
              body: comment
            });
          });