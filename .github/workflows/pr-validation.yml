name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
        
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Validate Maven POM
      run: mvn validate
      
    - name: Compile project
      run: mvn clean compile test-compile
      
    - name: Run unit tests
      run: mvn test -Dtest=RedlockConfigurationTest
      
    - name: Run integration tests
      run: mvn test -Dtest=RedlockIntegrationTest
      env:
        TESTCONTAINERS_RYUK_DISABLED: false
        
    - name: Generate test coverage
      run: mvn jacoco:report
      
    - name: Check code coverage
      run: |
        COVERAGE=$(mvn jacoco:report | grep -o 'Total.*[0-9]*%' | tail -1 | grep -o '[0-9]*%' || echo "0%")
        echo "Code coverage: $COVERAGE"
        echo "## PR Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Coverage:** $COVERAGE" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          // Read test results
          let testResults = "Tests completed";
          try {
            const summaryFile = process.env.GITHUB_STEP_SUMMARY;
            if (fs.existsSync(summaryFile)) {
              testResults = fs.readFileSync(summaryFile, 'utf8');
            }
          } catch (error) {
            console.log('Could not read test results:', error);
          }
          
          const comment = `
          ## 🔍 PR Validation Results
          
          **Commit:** \`${{ github.event.pull_request.head.sha }}\`
          **Status:** ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }}
          
          ### Test Results
          - ✅ Maven POM validation
          - ✅ Project compilation
          - ✅ Unit tests
          - ✅ Integration tests with Testcontainers
          - ✅ Code coverage analysis
          
          ### Next Steps
          ${job.status == 'success' 
            ? '🎉 All checks passed! This PR is ready for review.' 
            : '⚠️ Some checks failed. Please review the workflow logs and fix any issues.'}
          
          **Workflow:** [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('🔍 PR Validation Results')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run security scan
      run: mvn org.owasp:dependency-check-maven:check
      continue-on-error: true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: target/dependency-check-report.html
        retention-days: 30

  code-style:
    name: Code Style Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'
        
    - name: Check license headers
      run: |
        echo "Checking license headers in Java files..."
        MISSING_LICENSE=0
        
        for file in $(find src -name "*.java"); do
          if ! head -5 "$file" | grep -q "MIT License"; then
            echo "❌ Missing license header: $file"
            MISSING_LICENSE=1
          fi
        done
        
        if [ $MISSING_LICENSE -eq 0 ]; then
          echo "✅ All Java files have proper license headers"
          echo "- **License Headers:** ✅ All files compliant" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some files are missing license headers"
          echo "- **License Headers:** ❌ Some files missing headers" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
    - name: Check code formatting
      run: |
        echo "Checking basic code formatting..."
        
        # Check for tabs vs spaces
        if grep -r $'\t' src/ --include="*.java"; then
          echo "❌ Found tab characters in Java files (should use spaces)"
          echo "- **Code Formatting:** ❌ Tab characters found" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ No tab characters found"
          echo "- **Code Formatting:** ✅ No tab characters" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for trailing whitespace
        if grep -r '[[:space:]]$' src/ --include="*.java"; then
          echo "⚠️ Found trailing whitespace in Java files"
          echo "- **Trailing Whitespace:** ⚠️ Found in some files" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No trailing whitespace found"
          echo "- **Trailing Whitespace:** ✅ None found" >> $GITHUB_STEP_SUMMARY
        fi
